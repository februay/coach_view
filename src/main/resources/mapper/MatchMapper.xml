<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="indi.xp.coachview.mapper.MatchMapper">

    <resultMap id="defaultResultMap" type="indi.xp.coachview.model.Match">
        <id column="match_id" property="matchId" />
        <result column="match_number" property="matchNumber" />
        <result column="match_name" property="matchName" />
        <result column="team_id" property="teamId" />
        <result column="match_session" property="matchSession" />
        <result column="match_time" property="matchTime" />
        <result column="match_video" property="matchVideo" />
        <result column="creator_id" property="creatorId" />
        <result column="create_time" property="createTime" />
        <result column="delete_status" property="deleteStatus" />
    </resultMap>

    <sql id="table_name">
        `match`
    </sql>

    <sql id="pk_column">match_id</sql>

    <sql id="common_where">
        where delete_status = 0
        <include refid="auth_filter" />
    </sql>

    <sql id="query_by_param">
        <if test="paramMap != null and !paramMap.isEmpty()">
            <foreach collection="paramMap" item="valueList" index="key">
                <if test="valueList != null and valueList.length > 0">
                    and ${key} in
                    <foreach collection="valueList" item="value" open="(" separator="," close=")">
                        #{value}
                    </foreach>
                </if>
            </foreach>
        </if>
    </sql>

    <sql id="auth_filter">
        <if test="authFilterMap != null and !authFilterMap.isEmpty()">
            <foreach collection="authFilterMap" item="valueList" index="key">
                <if test="valueList != null and valueList.length > 0">
                    and ${key} in
                    <foreach collection="valueList" item="value" open="(" separator="," close=")">
                        #{value}
                    </foreach>
                </if>
            </foreach>
        </if>
    </sql>

    <sql id="pk_in">
        <if test="idList != null and idList.size() > 0">
            and <include refid="pk_column" /> in
            <foreach collection="idList" item="id" open="(" separator="," close=")">
                #{id}
            </foreach>
        </if>
    </sql>

    <select id="getById" parameterType="java.lang.String" resultMap="defaultResultMap">
        select * from <include refid="table_name" />
        <include refid="common_where" />
        and <include refid="pk_column" /> = #{id}
    </select>

    <select id="findByIdList" parameterType="java.util.List" resultMap="defaultResultMap">
        select * from <include refid="table_name" />
        <include refid="common_where" />
        <include refid="pk_in" />
    </select>

    <select id="findList" parameterType="java.util.List" resultMap="defaultResultMap">
        select *
        from <include refid="table_name" />
        <include refid="common_where" />
    </select>

    <insert id="add">
        insert into <include refid="table_name" /> (match_id, match_number, match_name, team_id, match_session, match_time, match_video, creator_id, create_time, delete_status)
        values(#{entity.matchId}, #{entity.matchNumber}, #{entity.matchName}, #{entity.teamId}, #{entity.matchSession}, #{entity.matchTime}, #{entity.matchVideo}, #{entity.creatorId}, #{entity.createTime}, #{entity.deleteStatus})
    </insert>

    <update id="update">
        update <include refid="table_name" /> set
          match_number = #{entity.matchNumber}, 
          match_name = #{entity.matchName}, 
          team_id = #{entity.teamId}, 
          match_session = #{entity.matchSession}, 
          match_time = #{entity.matchTime}, 
          match_video = #{entity.matchVideo}, 
          creator_id = #{entity.creatorId}, 
          create_time = #{entity.createTime}, 
          delete_status = #{entity.deleteStatus}
        where <include refid="pk_column" /> = #{entity.matchId}
    </update>

    <update id="delete">
        update
        <include refid="table_name" />
        set delete_status = 1
        <include refid="common_where" />
        and <include refid="pk_column" /> = #{id}
    </update>

    <update id="batchDelete" parameterType="java.util.List">
        update
        <include refid="table_name" />
        set delete_status = 1
        <include refid="common_where" />
        <include refid="pk_in" />
    </update>

    <select id="getByWhere" parameterType="java.util.Map" resultMap="defaultResultMap">
        select * from
        <include refid="table_name" />
        <include refid="common_where" />
        <include refid="query_by_param" />
        limit 1
    </select>

    <select id="findByWhere" parameterType="java.util.Map" resultMap="defaultResultMap">
        select * from
        <include refid="table_name" />
        <include refid="common_where" />
        <include refid="query_by_param" />
    </select>

    <select id="queryCount" parameterType="java.util.Map" resultType="java.lang.Integer">
        select count(1) from
        <include refid="table_name" />
        <include refid="common_where" />
        <include refid="query_by_param" />
    </select>

    <update id="updateByWhere" parameterType="java.util.Map">
        update
        <include refid="table_name" />
        set
        <foreach collection="updateMap" item="value" index="key" separator=",">
            ${key} = #{value}
        </foreach>
        <include refid="common_where" />
        <include refid="query_by_param" />
    </update>

    <select id="statTeamMatchDataInfo" resultType="java.util.Map">
        select t.team_id as teamId, t.team_name as teamName,
            avg(mt.possession_percentage) as avgPossessionPercentage,
            avg(mt.running_distance) as avgRunningDistance,
            avg(mt.pass_success_percentage) as avgPassSuccessPercentage,
            avg(mt.pass_count) as avgPassCount, avg(mt.pass_success_count) as avgPassSuccessCount,
            avg(mt.shoot_count) as avgShootCount, avg(mt.shoot_target_count) as avgShootTargetCount,
            sum(mt.goals) as sumGoals, avg(mt.goals) as avgGoals,
            sum(mt.losses) as sumLosses, avg(mt.losses) as avgLosses,
            avg(mt.steals) as avgSteals,
            sum(if(mt.match_result = '胜', 1 , 0)) as countWin,
            sum(if(mt.match_result = '平', 1 , 0)) as countDraw,
            sum(if(mt.match_result = '负', 1 , 0)) as countDefeat
        from team t left join match_team_info mt on mt.team_id = t.team_id
            left join school s on t.school_id = s.school_id
            left join `match` m on mt.match_id = m.match_id
        where t.delete_status = 0 and (mt.delete_status = 0 and mt.opponent = '否' or mt.match_id is null) and s.delete_status = 0 
            and (m.delete_status = 0 or m.match_id is null) 
        <if test="teamId != null and teamId.trim().length() > 0">
            and t.team_id = #{teamId}
        </if>
        <if test="schoolId != null and schoolId.trim().length() > 0">
            and t.school_id = #{schoolId}
        </if>
        <if test="clubId != null and clubId.trim().length() > 0">
            and s.club_id = #{clubId}
        </if>
        group by t.team_id
    </select>
    
    <select id="statTeamMemberAvgMatchDataInfo" resultType="java.util.Map">
        select tm.team_id as teamId, tm.member_id as memberId, tm.name, tm.number as number,
            tm.age, tm.weight, tm.height, tm.photo, tm.first_position as firstPosition, tm.second_position as secondPosition,
            tm.attack, tm.speed, tm.technology, tm.defense, tm.team, tm.endurance,
            avg(mtm.pass_count) as avgPassCount, avg(mtm.pass_success_count) as avgPassSuccessCount,
            avg(mtm.pass_success_percentage) as avgPassSuccessPercentage, avg(mtm.shoot_count) as avgShootCount, 
            avg(mtm.shoot_target_count) as avgShootTargetCount,
            avg(mtm.running_distance) as avgRunningDistance, avg(mtm.steals) as avgSteals, avg(mtm.goals) as avgGoals
        from team_member tm left join match_team_member_info mtm on mtm.team_id = tm.team_id and mtm.member_number = tm.number 
            left join match_team_info mt on mtm.match_id = mt.match_id and mt.opponent = '否'
            left join `match` m on mt.match_id = m.match_id
        where tm.team_id = #{teamId} and tm.delete_status = 0 and (mtm.delete_status= 0 or mtm.match_id is null) 
            and (mt.delete_status = 0 and mt.opponent = '否' or mt.match_id is null) 
            and (m.delete_status = 0 or m.match_id is null) 
        group by tm.team_id, tm.member_id
    </select>

    <select id="statTeamMemberDetailMatchDataInfo" resultType="java.util.Map">
        select tm.team_id as teamId, tm.member_id as memberId, tm.name, tm.number as number,
            m.match_id as matchId, m.match_number as matchNumber, m.match_name as matchName,
            mt.match_session as matchSession, mt.match_result as matchResult,
            mtm.pass_count as passCount, mtm.pass_success_count as passSuccessCount, mtm.pass_success_percentage as passSuccessPercentage, 
            mtm.shoot_count as shootCount, mtm.shoot_target_count as shootTargetCount, mtm.running_distance as runningDistance, 
            mtm.steals as steals, mtm.goals as goals, mtm.position as position
        from team_member tm left join match_team_member_info mtm on mtm.team_id = tm.team_id and mtm.member_number = tm.number 
            left join match_team_info mt on mtm.match_id = mt.match_id and mt.opponent = '否' 
            left join `match` m on mt.match_id = m.match_id
        where tm.team_id = #{teamId} and tm.delete_status = 0 and mtm.delete_status= 0
            and (mt.delete_status = 0 and mt.opponent = '否') and m.delete_status = 0
    </select>

    <select id="statSingleTeamAvgMatchDataInfo" resultType="java.util.Map">
        select t.team_id as teamId, t.team_name as teamName, mt.opponent,
            avg(mt.possession_percentage) as avgPossessionPercentage,
            avg(mt.running_distance) as avgRunningDistance,
            avg(mt.pass_success_percentage) as avgPassSuccessPercentage,
            avg(mt.pass_count) as avgPassCount, avg(mt.pass_success_count) as avgPassSuccessCount,
            avg(mt.shoot_count) as avgShootCount, avg(mt.shoot_target_count) as avgShootTargetCount,
            sum(mt.goals) as sumGoals, avg(mt.goals) as avgGoals,
            sum(mt.losses) as sumLosses, avg(mt.losses) as avgLosses,
            avg(mt.steals) as avgSteals,
            sum(if(mt.match_result = '胜', 1 , 0)) as countWin,
            sum(if(mt.match_result = '平', 1 , 0)) as countDraw,
            sum(if(mt.match_result = '负', 1 , 0)) as countDefeat
        from team t left join match_team_info mt on mt.team_id = t.team_id
            left join `match` m on mt.match_id = m.match_id
        where t.team_id = #{teamId} and t.delete_status = 0 
            and (mt.delete_status = 0 or mt.match_id is null)  
            and (m.delete_status = 0 or m.match_id is null) 
        group by mt.opponent
    </select>

    <select id="statSingleTeamDetailMatchDataInfo" resultType="java.util.Map">
        select t.team_id as teamId, t.team_name as teamName, 
            m.match_id as matchId, m.match_number as matchNumber, m.match_name as matchName,
            mt.match_session as matchSession, mt.opponent,
            mt.possession_percentage as possessionPercentage,
            mt.running_distance as runningDistance,
            mt.pass_success_percentage as passSuccessPercentage,
            mt.pass_count as passCount, mt.pass_success_count as passSuccessCount,
            mt.shoot_count as shootCount, mt.shoot_target_count as shootTargetCount,
            mt.goals, mt.losses,mt.steals, mt.match_result as matchResult
        from team t left join match_team_info mt on mt.team_id = t.team_id 
            left join `match` m on mt.match_id = m.match_id
        where t.team_id = #{teamId} and t.delete_status = 0 
            and mt.delete_status = 0 and m.delete_status = 0
        order by mt.match_session
    </select>

</mapper>